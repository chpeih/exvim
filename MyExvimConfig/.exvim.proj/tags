!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AWK_ARRAY	./local/include/gawkapi.h	/^	AWK_ARRAY,$/;"	e	language:C++	enum:__anon2
AWK_ELEMENT_DEFAULT	./local/include/gawkapi.h	/^		AWK_ELEMENT_DEFAULT = 0,	\/* set by gawk *\/$/;"	e	language:C++	enum:awk_element::__anon4
AWK_ELEMENT_DELETE	./local/include/gawkapi.h	/^		AWK_ELEMENT_DELETE = 1		\/* set by extension if$/;"	e	language:C++	enum:awk_element::__anon4
AWK_NUMBER	./local/include/gawkapi.h	/^	AWK_NUMBER,$/;"	e	language:C++	enum:__anon2
AWK_SCALAR	./local/include/gawkapi.h	/^	AWK_SCALAR,		\/* opaque access to a variable *\/$/;"	e	language:C++	enum:__anon2
AWK_STRING	./local/include/gawkapi.h	/^	AWK_STRING,$/;"	e	language:C++	enum:__anon2
AWK_UNDEFINED	./local/include/gawkapi.h	/^	AWK_UNDEFINED,$/;"	e	language:C++	enum:__anon2
AWK_VALUE_COOKIE	./local/include/gawkapi.h	/^	AWK_VALUE_COOKIE	\/* for updating a previously created value *\/$/;"	e	language:C++	enum:__anon2
DO_FLAGS_SIZE	./local/include/gawkapi.h	399;"	d	language:C++
GAWK_API_MAJOR_VERSION	./local/include/gawkapi.h	/^	GAWK_API_MAJOR_VERSION = 1,$/;"	e	language:C++	enum:__anon1
GAWK_API_MINOR_VERSION	./local/include/gawkapi.h	/^	GAWK_API_MINOR_VERSION = 1$/;"	e	language:C++	enum:__anon1
INVALID_HANDLE	./local/include/gawkapi.h	124;"	d	language:C++
_GAWK_API_H	./local/include/gawkapi.h	48;"	d	language:C++
a	./local/include/gawkapi.h	/^		awk_array_t	a;$/;"	m	language:C++	union:awk_value::__anon3	access:public
add_ext_func	./local/include/gawkapi.h	711;"	d	language:C++
api_add_ext_func	./local/include/gawkapi.h	/^	awk_bool_t (*api_add_ext_func)(awk_ext_id_t id, const char *namespace,$/;"	m	language:C++	struct:gawk_api	access:public
api_awk_atexit	./local/include/gawkapi.h	/^	void (*api_awk_atexit)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_calloc	./local/include/gawkapi.h	/^	void *(*api_calloc)(size_t nmemb, size_t size);$/;"	m	language:C++	struct:gawk_api	access:public
api_clear_array	./local/include/gawkapi.h	/^	awk_bool_t (*api_clear_array)(awk_ext_id_t id, awk_array_t a_cookie);$/;"	m	language:C++	struct:gawk_api	access:public
api_create_array	./local/include/gawkapi.h	/^	awk_array_t (*api_create_array)(awk_ext_id_t id);$/;"	m	language:C++	struct:gawk_api	access:public
api_create_value	./local/include/gawkapi.h	/^	awk_bool_t (*api_create_value)(awk_ext_id_t id, awk_value_t *value,$/;"	m	language:C++	struct:gawk_api	access:public
api_del_array_element	./local/include/gawkapi.h	/^	awk_bool_t (*api_del_array_element)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_fatal	./local/include/gawkapi.h	/^	void (*api_fatal)(awk_ext_id_t id, const char *format, ...);$/;"	m	language:C++	struct:gawk_api	access:public
api_flatten_array	./local/include/gawkapi.h	/^	awk_bool_t (*api_flatten_array)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_free	./local/include/gawkapi.h	/^	void (*api_free)(void *ptr);$/;"	m	language:C++	struct:gawk_api	access:public
api_get_argument	./local/include/gawkapi.h	/^	awk_bool_t (*api_get_argument)(awk_ext_id_t id, size_t count,$/;"	m	language:C++	struct:gawk_api	access:public
api_get_array_element	./local/include/gawkapi.h	/^	awk_bool_t (*api_get_array_element)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_get_element_count	./local/include/gawkapi.h	/^	awk_bool_t (*api_get_element_count)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_lintwarn	./local/include/gawkapi.h	/^	void (*api_lintwarn)(awk_ext_id_t id, const char *format, ...);$/;"	m	language:C++	struct:gawk_api	access:public
api_malloc	./local/include/gawkapi.h	/^	void *(*api_malloc)(size_t size);$/;"	m	language:C++	struct:gawk_api	access:public
api_realloc	./local/include/gawkapi.h	/^	void *(*api_realloc)(void *ptr, size_t size);$/;"	m	language:C++	struct:gawk_api	access:public
api_register_ext_version	./local/include/gawkapi.h	/^	void (*api_register_ext_version)(awk_ext_id_t id, const char *version);$/;"	m	language:C++	struct:gawk_api	access:public
api_register_input_parser	./local/include/gawkapi.h	/^	void (*api_register_input_parser)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_register_output_wrapper	./local/include/gawkapi.h	/^	void (*api_register_output_wrapper)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_register_two_way_processor	./local/include/gawkapi.h	/^	void (*api_register_two_way_processor)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_release_flattened_array	./local/include/gawkapi.h	/^	awk_bool_t (*api_release_flattened_array)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_release_value	./local/include/gawkapi.h	/^	awk_bool_t (*api_release_value)(awk_ext_id_t id, awk_value_cookie_t vc);$/;"	m	language:C++	struct:gawk_api	access:public
api_set_argument	./local/include/gawkapi.h	/^	awk_bool_t (*api_set_argument)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_set_array_element	./local/include/gawkapi.h	/^	awk_bool_t (*api_set_array_element)(awk_ext_id_t id, awk_array_t a_cookie,$/;"	m	language:C++	struct:gawk_api	access:public
api_sym_lookup	./local/include/gawkapi.h	/^	awk_bool_t (*api_sym_lookup)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_sym_lookup_scalar	./local/include/gawkapi.h	/^	awk_bool_t (*api_sym_lookup_scalar)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_sym_update	./local/include/gawkapi.h	/^	awk_bool_t (*api_sym_update)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_sym_update_scalar	./local/include/gawkapi.h	/^	awk_bool_t (*api_sym_update_scalar)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
api_unset_ERRNO	./local/include/gawkapi.h	/^	void (*api_unset_ERRNO)(awk_ext_id_t id);$/;"	m	language:C++	struct:gawk_api	access:public
api_update_ERRNO_int	./local/include/gawkapi.h	/^	void (*api_update_ERRNO_int)(awk_ext_id_t id, int errno_val);$/;"	m	language:C++	struct:gawk_api	access:public
api_update_ERRNO_string	./local/include/gawkapi.h	/^	void (*api_update_ERRNO_string)(awk_ext_id_t id, const char *string);$/;"	m	language:C++	struct:gawk_api	access:public
api_warning	./local/include/gawkapi.h	/^	void (*api_warning)(awk_ext_id_t id, const char *format, ...);$/;"	m	language:C++	struct:gawk_api	access:public
array_cookie	./local/include/gawkapi.h	324;"	d	language:C++
awk_array_t	./local/include/gawkapi.h	/^typedef void *awk_array_t;$/;"	t	language:C++
awk_atexit	./local/include/gawkapi.h	712;"	d	language:C++
awk_bool	./local/include/gawkapi.h	/^typedef enum awk_bool {$/;"	g	language:C++
awk_bool_t	./local/include/gawkapi.h	/^} awk_bool_t;	\/* we don't use <stdbool.h> on purpose *\/$/;"	t	language:C++	typeref:enum:awk_bool
awk_const	./local/include/gawkapi.h	110;"	d	language:C++
awk_const	./local/include/gawkapi.h	112;"	d	language:C++
awk_element	./local/include/gawkapi.h	/^typedef struct awk_element {$/;"	s	language:C++
awk_element::AWK_ELEMENT_DEFAULT	./local/include/gawkapi.h	/^		AWK_ELEMENT_DEFAULT = 0,	\/* set by gawk *\/$/;"	e	language:C++	enum:awk_element::__anon4
awk_element::AWK_ELEMENT_DELETE	./local/include/gawkapi.h	/^		AWK_ELEMENT_DELETE = 1		\/* set by extension if$/;"	e	language:C++	enum:awk_element::__anon4
awk_element::flags	./local/include/gawkapi.h	/^	} flags;$/;"	m	language:C++	struct:awk_element	typeref:enum:awk_element::__anon4	access:public
awk_element::index	./local/include/gawkapi.h	/^	awk_value_t	index;			\/* guaranteed to be a string! *\/$/;"	m	language:C++	struct:awk_element	access:public
awk_element::next	./local/include/gawkapi.h	/^	struct awk_element *next;$/;"	m	language:C++	struct:awk_element	typeref:struct:awk_element::awk_element	access:public
awk_element::value	./local/include/gawkapi.h	/^	awk_value_t	value;$/;"	m	language:C++	struct:awk_element	access:public
awk_element_t	./local/include/gawkapi.h	/^} awk_element_t;$/;"	t	language:C++	typeref:struct:awk_element
awk_ext_func	./local/include/gawkapi.h	/^typedef struct awk_ext_func {$/;"	s	language:C++
awk_ext_func::function	./local/include/gawkapi.h	/^	awk_value_t *(*function)(int num_actual_args, awk_value_t *result);$/;"	m	language:C++	struct:awk_ext_func	access:public
awk_ext_func::name	./local/include/gawkapi.h	/^	const char *name;$/;"	m	language:C++	struct:awk_ext_func	access:public
awk_ext_func::num_expected_args	./local/include/gawkapi.h	/^	size_t num_expected_args;$/;"	m	language:C++	struct:awk_ext_func	access:public
awk_ext_func_t	./local/include/gawkapi.h	/^} awk_ext_func_t;$/;"	t	language:C++	typeref:struct:awk_ext_func
awk_ext_id_t	./local/include/gawkapi.h	/^typedef void *awk_ext_id_t;	\/* opaque type for extension id *\/$/;"	t	language:C++
awk_false	./local/include/gawkapi.h	/^	awk_false = 0,$/;"	e	language:C++	enum:awk_bool
awk_flat_array	./local/include/gawkapi.h	/^typedef struct awk_flat_array {$/;"	s	language:C++
awk_flat_array::count	./local/include/gawkapi.h	/^	awk_const size_t count;			\/* how many elements *\/$/;"	m	language:C++	struct:awk_flat_array	access:public
awk_flat_array::elements	./local/include/gawkapi.h	/^	awk_element_t elements[1];		\/* will be extended *\/$/;"	m	language:C++	struct:awk_flat_array	access:public
awk_flat_array::opaque1	./local/include/gawkapi.h	/^	awk_const void *awk_const opaque1;	\/* private data for use by gawk *\/$/;"	m	language:C++	struct:awk_flat_array	access:public
awk_flat_array::opaque2	./local/include/gawkapi.h	/^	awk_const void *awk_const opaque2;	\/* private data for use by gawk *\/$/;"	m	language:C++	struct:awk_flat_array	access:public
awk_flat_array_t	./local/include/gawkapi.h	/^} awk_flat_array_t;$/;"	t	language:C++	typeref:struct:awk_flat_array
awk_input	./local/include/gawkapi.h	/^typedef struct awk_input {$/;"	s	language:C++
awk_input::close_func	./local/include/gawkapi.h	/^	void (*close_func)(struct awk_input *iobuf);$/;"	m	language:C++	struct:awk_input	access:public
awk_input::fd	./local/include/gawkapi.h	/^	int fd;			\/* file descriptor *\/$/;"	m	language:C++	struct:awk_input	access:public
awk_input::get_record	./local/include/gawkapi.h	/^	int (*get_record)(char **out, struct awk_input *iobuf, int *errcode,$/;"	m	language:C++	struct:awk_input	access:public
awk_input::name	./local/include/gawkapi.h	/^	const char *name;	\/* filename *\/$/;"	m	language:C++	struct:awk_input	access:public
awk_input::opaque	./local/include/gawkapi.h	/^	void *opaque;           \/* private data for input parsers *\/$/;"	m	language:C++	struct:awk_input	access:public
awk_input::read_func	./local/include/gawkapi.h	/^	ssize_t (*read_func)();$/;"	m	language:C++	struct:awk_input	access:public
awk_input::sbuf	./local/include/gawkapi.h	/^	struct stat sbuf;       \/* stat buf *\/$/;"	m	language:C++	struct:awk_input	typeref:struct:awk_input::stat	access:public
awk_input_buf_t	./local/include/gawkapi.h	/^} awk_input_buf_t;$/;"	t	language:C++	typeref:struct:awk_input
awk_input_parser	./local/include/gawkapi.h	/^typedef struct awk_input_parser {$/;"	s	language:C++
awk_input_parser::can_take_file	./local/include/gawkapi.h	/^	awk_bool_t (*can_take_file)(const awk_input_buf_t *iobuf);$/;"	m	language:C++	struct:awk_input_parser	access:public
awk_input_parser::name	./local/include/gawkapi.h	/^	const char *name;	\/* name of parser *\/$/;"	m	language:C++	struct:awk_input_parser	access:public
awk_input_parser::next	./local/include/gawkapi.h	/^	awk_const struct awk_input_parser *awk_const next;	\/* for use by gawk *\/$/;"	m	language:C++	struct:awk_input_parser	typeref:struct:awk_input_parser::awk_const	access:public
awk_input_parser::take_control_of	./local/include/gawkapi.h	/^	awk_bool_t (*take_control_of)(awk_input_buf_t *iobuf);$/;"	m	language:C++	struct:awk_input_parser	access:public
awk_input_parser_t	./local/include/gawkapi.h	/^} awk_input_parser_t;$/;"	t	language:C++	typeref:struct:awk_input_parser
awk_output_buf	./local/include/gawkapi.h	/^typedef struct awk_output_buf {$/;"	s	language:C++
awk_output_buf::fp	./local/include/gawkapi.h	/^	FILE *fp;		\/* stdio file pointer *\/$/;"	m	language:C++	struct:awk_output_buf	access:public
awk_output_buf::gawk_fclose	./local/include/gawkapi.h	/^	int (*gawk_fclose)(FILE *fp, void *opaque);$/;"	m	language:C++	struct:awk_output_buf	access:public
awk_output_buf::gawk_ferror	./local/include/gawkapi.h	/^	int (*gawk_ferror)(FILE *fp, void *opaque);$/;"	m	language:C++	struct:awk_output_buf	access:public
awk_output_buf::gawk_fflush	./local/include/gawkapi.h	/^	int (*gawk_fflush)(FILE *fp, void *opaque);$/;"	m	language:C++	struct:awk_output_buf	access:public
awk_output_buf::gawk_fwrite	./local/include/gawkapi.h	/^	size_t (*gawk_fwrite)(const void *buf, size_t size, size_t count,$/;"	m	language:C++	struct:awk_output_buf	access:public
awk_output_buf::mode	./local/include/gawkapi.h	/^	const char *mode;	\/* mode argument to fopen *\/$/;"	m	language:C++	struct:awk_output_buf	access:public
awk_output_buf::name	./local/include/gawkapi.h	/^	const char *name;	\/* name of output file *\/$/;"	m	language:C++	struct:awk_output_buf	access:public
awk_output_buf::opaque	./local/include/gawkapi.h	/^	void *opaque;		\/* for use by output wrapper *\/$/;"	m	language:C++	struct:awk_output_buf	access:public
awk_output_buf::redirected	./local/include/gawkapi.h	/^	awk_bool_t redirected;	\/* true if a wrapper is active *\/$/;"	m	language:C++	struct:awk_output_buf	access:public
awk_output_buf_t	./local/include/gawkapi.h	/^} awk_output_buf_t;$/;"	t	language:C++	typeref:struct:awk_output_buf
awk_output_wrapper	./local/include/gawkapi.h	/^typedef struct awk_output_wrapper {$/;"	s	language:C++
awk_output_wrapper::can_take_file	./local/include/gawkapi.h	/^	awk_bool_t (*can_take_file)(const awk_output_buf_t *outbuf);$/;"	m	language:C++	struct:awk_output_wrapper	access:public
awk_output_wrapper::name	./local/include/gawkapi.h	/^	const char *name;	\/* name of the wrapper *\/$/;"	m	language:C++	struct:awk_output_wrapper	access:public
awk_output_wrapper::next	./local/include/gawkapi.h	/^	awk_const struct awk_output_wrapper *awk_const next;  \/* for use by gawk *\/$/;"	m	language:C++	struct:awk_output_wrapper	typeref:struct:awk_output_wrapper::awk_const	access:public
awk_output_wrapper::take_control_of	./local/include/gawkapi.h	/^	awk_bool_t (*take_control_of)(awk_output_buf_t *outbuf);$/;"	m	language:C++	struct:awk_output_wrapper	access:public
awk_output_wrapper_t	./local/include/gawkapi.h	/^} awk_output_wrapper_t;$/;"	t	language:C++	typeref:struct:awk_output_wrapper
awk_scalar_t	./local/include/gawkapi.h	/^typedef void *awk_scalar_t;$/;"	t	language:C++
awk_string	./local/include/gawkapi.h	/^typedef struct awk_string {$/;"	s	language:C++
awk_string::len	./local/include/gawkapi.h	/^	size_t len;	\/* length thereof, in chars *\/$/;"	m	language:C++	struct:awk_string	access:public
awk_string::str	./local/include/gawkapi.h	/^	char *str;	\/* data *\/$/;"	m	language:C++	struct:awk_string	access:public
awk_string_t	./local/include/gawkapi.h	/^} awk_string_t;$/;"	t	language:C++	typeref:struct:awk_string
awk_true	./local/include/gawkapi.h	/^	awk_true$/;"	e	language:C++	enum:awk_bool
awk_two_way_processor	./local/include/gawkapi.h	/^typedef struct awk_two_way_processor {$/;"	s	language:C++
awk_two_way_processor::can_take_two_way	./local/include/gawkapi.h	/^	awk_bool_t (*can_take_two_way)(const char *name);$/;"	m	language:C++	struct:awk_two_way_processor	access:public
awk_two_way_processor::name	./local/include/gawkapi.h	/^	const char *name;	\/* name of the two-way processor *\/$/;"	m	language:C++	struct:awk_two_way_processor	access:public
awk_two_way_processor::next	./local/include/gawkapi.h	/^	awk_const struct awk_two_way_processor *awk_const next;  \/* for use by gawk *\/$/;"	m	language:C++	struct:awk_two_way_processor	typeref:struct:awk_two_way_processor::awk_const	access:public
awk_two_way_processor::take_control_of	./local/include/gawkapi.h	/^	awk_bool_t (*take_control_of)(const char *name, awk_input_buf_t *inbuf,$/;"	m	language:C++	struct:awk_two_way_processor	access:public
awk_two_way_processor_t	./local/include/gawkapi.h	/^} awk_two_way_processor_t;$/;"	t	language:C++	typeref:struct:awk_two_way_processor
awk_valtype_t	./local/include/gawkapi.h	/^} awk_valtype_t;$/;"	t	language:C++	typeref:enum:__anon2
awk_value	./local/include/gawkapi.h	/^typedef struct awk_value {$/;"	s	language:C++
awk_value::__anon3::a	./local/include/gawkapi.h	/^		awk_array_t	a;$/;"	m	language:C++	union:awk_value::__anon3	access:public
awk_value::__anon3::d	./local/include/gawkapi.h	/^		double		d;$/;"	m	language:C++	union:awk_value::__anon3	access:public
awk_value::__anon3::s	./local/include/gawkapi.h	/^		awk_string_t	s;$/;"	m	language:C++	union:awk_value::__anon3	access:public
awk_value::__anon3::scl	./local/include/gawkapi.h	/^		awk_scalar_t	scl;$/;"	m	language:C++	union:awk_value::__anon3	access:public
awk_value::__anon3::vc	./local/include/gawkapi.h	/^		awk_value_cookie_t vc;$/;"	m	language:C++	union:awk_value::__anon3	access:public
awk_value::u	./local/include/gawkapi.h	/^	} u;$/;"	m	language:C++	struct:awk_value	typeref:union:awk_value::__anon3	access:public
awk_value::val_type	./local/include/gawkapi.h	/^	awk_valtype_t	val_type;$/;"	m	language:C++	struct:awk_value	access:public
awk_value_cookie_t	./local/include/gawkapi.h	/^typedef void *awk_value_cookie_t;$/;"	t	language:C++
awk_value_t	./local/include/gawkapi.h	/^} awk_value_t;$/;"	t	language:C++	typeref:struct:awk_value
can_take_file	./local/include/gawkapi.h	/^	awk_bool_t (*can_take_file)(const awk_input_buf_t *iobuf);$/;"	m	language:C++	struct:awk_input_parser	access:public
can_take_file	./local/include/gawkapi.h	/^	awk_bool_t (*can_take_file)(const awk_output_buf_t *outbuf);$/;"	m	language:C++	struct:awk_output_wrapper	access:public
can_take_two_way	./local/include/gawkapi.h	/^	awk_bool_t (*can_take_two_way)(const char *name);$/;"	m	language:C++	struct:awk_two_way_processor	access:public
clear_array	./local/include/gawkapi.h	740;"	d	language:C++
close_func	./local/include/gawkapi.h	/^	void (*close_func)(struct awk_input *iobuf);$/;"	m	language:C++	struct:awk_input	access:public
count	./local/include/gawkapi.h	/^	awk_const size_t count;			\/* how many elements *\/$/;"	m	language:C++	struct:awk_flat_array	access:public
create_array	./local/include/gawkapi.h	738;"	d	language:C++
create_value	./local/include/gawkapi.h	753;"	d	language:C++
d	./local/include/gawkapi.h	/^		double		d;$/;"	m	language:C++	union:awk_value::__anon3	access:public
del_array_element	./local/include/gawkapi.h	732;"	d	language:C++
dl_load	./local/include/gawkapi.h	/^extern int dl_load(const gawk_api_t *const api_p, awk_ext_id_t id);$/;"	p	language:C++	signature:(const gawk_api_t *const api_p, awk_ext_id_t id)
dl_load_func	./local/include/gawkapi.h	878;"	d	language:C++
do_debug	./local/include/gawkapi.h	689;"	d	language:C++
do_flags	./local/include/gawkapi.h	/^	awk_const int do_flags[DO_FLAGS_SIZE];$/;"	m	language:C++	struct:gawk_api	access:public
do_lint	./local/include/gawkapi.h	685;"	d	language:C++
do_mpfr	./local/include/gawkapi.h	690;"	d	language:C++
do_profile	./local/include/gawkapi.h	687;"	d	language:C++
do_sandbox	./local/include/gawkapi.h	688;"	d	language:C++
do_traditional	./local/include/gawkapi.h	686;"	d	language:C++
elements	./local/include/gawkapi.h	/^	awk_element_t elements[1];		\/* will be extended *\/$/;"	m	language:C++	struct:awk_flat_array	access:public
emalloc	./local/include/gawkapi.h	762;"	d	language:C++
erealloc	./local/include/gawkapi.h	768;"	d	language:C++
fatal	./local/include/gawkapi.h	697;"	d	language:C++
fd	./local/include/gawkapi.h	/^	int fd;			\/* file descriptor *\/$/;"	m	language:C++	struct:awk_input	access:public
flags	./local/include/gawkapi.h	/^	} flags;$/;"	m	language:C++	struct:awk_element	typeref:enum:awk_element::__anon4	access:public
flatten_array	./local/include/gawkapi.h	742;"	d	language:C++
fp	./local/include/gawkapi.h	/^	FILE *fp;		\/* stdio file pointer *\/$/;"	m	language:C++	struct:awk_output_buf	access:public
function	./local/include/gawkapi.h	/^	awk_value_t *(*function)(int num_actual_args, awk_value_t *result);$/;"	m	language:C++	struct:awk_ext_func	access:public
gawk_api	./local/include/gawkapi.h	/^typedef struct gawk_api {$/;"	s	language:C++
gawk_api::api_add_ext_func	./local/include/gawkapi.h	/^	awk_bool_t (*api_add_ext_func)(awk_ext_id_t id, const char *namespace,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_awk_atexit	./local/include/gawkapi.h	/^	void (*api_awk_atexit)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_calloc	./local/include/gawkapi.h	/^	void *(*api_calloc)(size_t nmemb, size_t size);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_clear_array	./local/include/gawkapi.h	/^	awk_bool_t (*api_clear_array)(awk_ext_id_t id, awk_array_t a_cookie);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_create_array	./local/include/gawkapi.h	/^	awk_array_t (*api_create_array)(awk_ext_id_t id);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_create_value	./local/include/gawkapi.h	/^	awk_bool_t (*api_create_value)(awk_ext_id_t id, awk_value_t *value,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_del_array_element	./local/include/gawkapi.h	/^	awk_bool_t (*api_del_array_element)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_fatal	./local/include/gawkapi.h	/^	void (*api_fatal)(awk_ext_id_t id, const char *format, ...);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_flatten_array	./local/include/gawkapi.h	/^	awk_bool_t (*api_flatten_array)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_free	./local/include/gawkapi.h	/^	void (*api_free)(void *ptr);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_get_argument	./local/include/gawkapi.h	/^	awk_bool_t (*api_get_argument)(awk_ext_id_t id, size_t count,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_get_array_element	./local/include/gawkapi.h	/^	awk_bool_t (*api_get_array_element)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_get_element_count	./local/include/gawkapi.h	/^	awk_bool_t (*api_get_element_count)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_lintwarn	./local/include/gawkapi.h	/^	void (*api_lintwarn)(awk_ext_id_t id, const char *format, ...);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_malloc	./local/include/gawkapi.h	/^	void *(*api_malloc)(size_t size);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_realloc	./local/include/gawkapi.h	/^	void *(*api_realloc)(void *ptr, size_t size);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_register_ext_version	./local/include/gawkapi.h	/^	void (*api_register_ext_version)(awk_ext_id_t id, const char *version);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_register_input_parser	./local/include/gawkapi.h	/^	void (*api_register_input_parser)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_register_output_wrapper	./local/include/gawkapi.h	/^	void (*api_register_output_wrapper)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_register_two_way_processor	./local/include/gawkapi.h	/^	void (*api_register_two_way_processor)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_release_flattened_array	./local/include/gawkapi.h	/^	awk_bool_t (*api_release_flattened_array)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_release_value	./local/include/gawkapi.h	/^	awk_bool_t (*api_release_value)(awk_ext_id_t id, awk_value_cookie_t vc);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_set_argument	./local/include/gawkapi.h	/^	awk_bool_t (*api_set_argument)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_set_array_element	./local/include/gawkapi.h	/^	awk_bool_t (*api_set_array_element)(awk_ext_id_t id, awk_array_t a_cookie,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_sym_lookup	./local/include/gawkapi.h	/^	awk_bool_t (*api_sym_lookup)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_sym_lookup_scalar	./local/include/gawkapi.h	/^	awk_bool_t (*api_sym_lookup_scalar)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_sym_update	./local/include/gawkapi.h	/^	awk_bool_t (*api_sym_update)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_sym_update_scalar	./local/include/gawkapi.h	/^	awk_bool_t (*api_sym_update_scalar)(awk_ext_id_t id,$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_unset_ERRNO	./local/include/gawkapi.h	/^	void (*api_unset_ERRNO)(awk_ext_id_t id);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_update_ERRNO_int	./local/include/gawkapi.h	/^	void (*api_update_ERRNO_int)(awk_ext_id_t id, int errno_val);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_update_ERRNO_string	./local/include/gawkapi.h	/^	void (*api_update_ERRNO_string)(awk_ext_id_t id, const char *string);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::api_warning	./local/include/gawkapi.h	/^	void (*api_warning)(awk_ext_id_t id, const char *format, ...);$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::do_flags	./local/include/gawkapi.h	/^	awk_const int do_flags[DO_FLAGS_SIZE];$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::major_version	./local/include/gawkapi.h	/^	awk_const int major_version;$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api::minor_version	./local/include/gawkapi.h	/^	awk_const int minor_version;$/;"	m	language:C++	struct:gawk_api	access:public
gawk_api_t	./local/include/gawkapi.h	/^} gawk_api_t;$/;"	t	language:C++	typeref:struct:gawk_api
gawk_calloc	./local/include/gawkapi.h	749;"	d	language:C++
gawk_do_debug	./local/include/gawkapi.h	406;"	d	language:C++
gawk_do_lint	./local/include/gawkapi.h	402;"	d	language:C++
gawk_do_mpfr	./local/include/gawkapi.h	407;"	d	language:C++
gawk_do_profile	./local/include/gawkapi.h	404;"	d	language:C++
gawk_do_sandbox	./local/include/gawkapi.h	405;"	d	language:C++
gawk_do_traditional	./local/include/gawkapi.h	403;"	d	language:C++
gawk_fclose	./local/include/gawkapi.h	/^	int (*gawk_fclose)(FILE *fp, void *opaque);$/;"	m	language:C++	struct:awk_output_buf	access:public
gawk_ferror	./local/include/gawkapi.h	/^	int (*gawk_ferror)(FILE *fp, void *opaque);$/;"	m	language:C++	struct:awk_output_buf	access:public
gawk_fflush	./local/include/gawkapi.h	/^	int (*gawk_fflush)(FILE *fp, void *opaque);$/;"	m	language:C++	struct:awk_output_buf	access:public
gawk_free	./local/include/gawkapi.h	751;"	d	language:C++
gawk_fwrite	./local/include/gawkapi.h	/^	size_t (*gawk_fwrite)(const void *buf, size_t size, size_t count,$/;"	m	language:C++	struct:awk_output_buf	access:public
gawk_malloc	./local/include/gawkapi.h	748;"	d	language:C++
gawk_realloc	./local/include/gawkapi.h	750;"	d	language:C++
get_argument	./local/include/gawkapi.h	692;"	d	language:C++
get_array_element	./local/include/gawkapi.h	723;"	d	language:C++
get_element_count	./local/include/gawkapi.h	735;"	d	language:C++
get_record	./local/include/gawkapi.h	/^	int (*get_record)(char **out, struct awk_input *iobuf, int *errcode,$/;"	m	language:C++	struct:awk_input	access:public
index	./local/include/gawkapi.h	/^	awk_value_t	index;			\/* guaranteed to be a string! *\/$/;"	m	language:C++	struct:awk_element	access:public
len	./local/include/gawkapi.h	/^	size_t len;	\/* length thereof, in chars *\/$/;"	m	language:C++	struct:awk_string	access:public
lintwarn	./local/include/gawkapi.h	699;"	d	language:C++
major_version	./local/include/gawkapi.h	/^	awk_const int major_version;$/;"	m	language:C++	struct:gawk_api	access:public
make_const_string	./local/include/gawkapi.h	805;"	d	language:C++
make_malloced_string	./local/include/gawkapi.h	806;"	d	language:C++
make_null_string	./local/include/gawkapi.h	/^make_null_string(awk_value_t *result)$/;"	f	language:C++	signature:(awk_value_t *result)
make_number	./local/include/gawkapi.h	/^make_number(double num, awk_value_t *result)$/;"	f	language:C++	signature:(double num, awk_value_t *result)
minor_version	./local/include/gawkapi.h	/^	awk_const int minor_version;$/;"	m	language:C++	struct:gawk_api	access:public
mode	./local/include/gawkapi.h	/^	const char *mode;	\/* mode argument to fopen *\/$/;"	m	language:C++	struct:awk_output_buf	access:public
name	./local/include/gawkapi.h	/^	const char *name;	\/* filename *\/$/;"	m	language:C++	struct:awk_input	access:public
name	./local/include/gawkapi.h	/^	const char *name;	\/* name of output file *\/$/;"	m	language:C++	struct:awk_output_buf	access:public
name	./local/include/gawkapi.h	/^	const char *name;	\/* name of parser *\/$/;"	m	language:C++	struct:awk_input_parser	access:public
name	./local/include/gawkapi.h	/^	const char *name;	\/* name of the two-way processor *\/$/;"	m	language:C++	struct:awk_two_way_processor	access:public
name	./local/include/gawkapi.h	/^	const char *name;	\/* name of the wrapper *\/$/;"	m	language:C++	struct:awk_output_wrapper	access:public
name	./local/include/gawkapi.h	/^	const char *name;$/;"	m	language:C++	struct:awk_ext_func	access:public
next	./local/include/gawkapi.h	/^	awk_const struct awk_input_parser *awk_const next;	\/* for use by gawk *\/$/;"	m	language:C++	struct:awk_input_parser	typeref:struct:awk_input_parser::awk_const	access:public
next	./local/include/gawkapi.h	/^	awk_const struct awk_output_wrapper *awk_const next;  \/* for use by gawk *\/$/;"	m	language:C++	struct:awk_output_wrapper	typeref:struct:awk_output_wrapper::awk_const	access:public
next	./local/include/gawkapi.h	/^	awk_const struct awk_two_way_processor *awk_const next;  \/* for use by gawk *\/$/;"	m	language:C++	struct:awk_two_way_processor	typeref:struct:awk_two_way_processor::awk_const	access:public
next	./local/include/gawkapi.h	/^	struct awk_element *next;$/;"	m	language:C++	struct:awk_element	typeref:struct:awk_element::awk_element	access:public
num_expected_args	./local/include/gawkapi.h	/^	size_t num_expected_args;$/;"	m	language:C++	struct:awk_ext_func	access:public
num_value	./local/include/gawkapi.h	323;"	d	language:C++
opaque	./local/include/gawkapi.h	/^	void *opaque;		\/* for use by output wrapper *\/$/;"	m	language:C++	struct:awk_output_buf	access:public
opaque	./local/include/gawkapi.h	/^	void *opaque;           \/* private data for input parsers *\/$/;"	m	language:C++	struct:awk_input	access:public
opaque1	./local/include/gawkapi.h	/^	awk_const void *awk_const opaque1;	\/* private data for use by gawk *\/$/;"	m	language:C++	struct:awk_flat_array	access:public
opaque2	./local/include/gawkapi.h	/^	awk_const void *awk_const opaque2;	\/* private data for use by gawk *\/$/;"	m	language:C++	struct:awk_flat_array	access:public
r_make_string	./local/include/gawkapi.h	/^r_make_string(const gawk_api_t *api,	\/* needed for emalloc *\/$/;"	f	language:C++	signature:(const gawk_api_t *api, awk_ext_id_t *ext_id, const char *string, size_t length, awk_bool_t duplicate, awk_value_t *result)
read_func	./local/include/gawkapi.h	/^	ssize_t (*read_func)();$/;"	m	language:C++	struct:awk_input	access:public
redirected	./local/include/gawkapi.h	/^	awk_bool_t redirected;	\/* true if a wrapper is active *\/$/;"	m	language:C++	struct:awk_output_buf	access:public
register_ext_version	./local/include/gawkapi.h	759;"	d	language:C++
register_input_parser	./local/include/gawkapi.h	701;"	d	language:C++
register_output_wrapper	./local/include/gawkapi.h	702;"	d	language:C++
register_two_way_processor	./local/include/gawkapi.h	703;"	d	language:C++
release_flattened_array	./local/include/gawkapi.h	745;"	d	language:C++
release_value	./local/include/gawkapi.h	756;"	d	language:C++
s	./local/include/gawkapi.h	/^		awk_string_t	s;$/;"	m	language:C++	union:awk_value::__anon3	access:public
sbuf	./local/include/gawkapi.h	/^	struct stat sbuf;       \/* stat buf *\/$/;"	m	language:C++	struct:awk_input	typeref:struct:awk_input::stat	access:public
scalar_cookie	./local/include/gawkapi.h	325;"	d	language:C++
scl	./local/include/gawkapi.h	/^		awk_scalar_t	scl;$/;"	m	language:C++	union:awk_value::__anon3	access:public
set_argument	./local/include/gawkapi.h	694;"	d	language:C++
set_array_element	./local/include/gawkapi.h	726;"	d	language:C++
set_array_element_by_elem	./local/include/gawkapi.h	729;"	d	language:C++
str	./local/include/gawkapi.h	/^	char *str;	\/* data *\/$/;"	m	language:C++	struct:awk_string	access:public
str_value	./local/include/gawkapi.h	322;"	d	language:C++
sym_lookup	./local/include/gawkapi.h	714;"	d	language:C++
sym_lookup_scalar	./local/include/gawkapi.h	716;"	d	language:C++
sym_update	./local/include/gawkapi.h	718;"	d	language:C++
sym_update_scalar	./local/include/gawkapi.h	720;"	d	language:C++
take_control_of	./local/include/gawkapi.h	/^	awk_bool_t (*take_control_of)(awk_input_buf_t *iobuf);$/;"	m	language:C++	struct:awk_input_parser	access:public
take_control_of	./local/include/gawkapi.h	/^	awk_bool_t (*take_control_of)(awk_output_buf_t *outbuf);$/;"	m	language:C++	struct:awk_output_wrapper	access:public
take_control_of	./local/include/gawkapi.h	/^	awk_bool_t (*take_control_of)(const char *name, awk_input_buf_t *inbuf,$/;"	m	language:C++	struct:awk_two_way_processor	access:public
u	./local/include/gawkapi.h	/^	} u;$/;"	m	language:C++	struct:awk_value	typeref:union:awk_value::__anon3	access:public
unset_ERRNO	./local/include/gawkapi.h	709;"	d	language:C++
update_ERRNO_int	./local/include/gawkapi.h	706;"	d	language:C++
update_ERRNO_string	./local/include/gawkapi.h	707;"	d	language:C++
val_type	./local/include/gawkapi.h	/^	awk_valtype_t	val_type;$/;"	m	language:C++	struct:awk_value	access:public
value	./local/include/gawkapi.h	/^	awk_value_t	value;$/;"	m	language:C++	struct:awk_element	access:public
value_cookie	./local/include/gawkapi.h	326;"	d	language:C++
vc	./local/include/gawkapi.h	/^		awk_value_cookie_t vc;$/;"	m	language:C++	union:awk_value::__anon3	access:public
warning	./local/include/gawkapi.h	698;"	d	language:C++
